import telebot
import threading
from telebot import types
import random

bot = telebot.TeleBot('—Ç–æ–∫–µ–Ω –±–æ—Ç–∞')
data_dict = {} #–¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
waiting_dict = {} #–¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
el=["-", "-", "-", "-", "-", "-", "-", "-", "-"] # –Ω–∞—à–∞ —Å–µ—Ç–∫–∞. 
position = 0 #–ø–æ–∑–∏—Ü–∏—è —Ö–æ–º—è–∫–∞

def GameRules(message): # –≤—ã–≤–æ–¥ –ø—Ä–∞–≤–∏–ª–∞/–æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã
    bot.send_message(message.chat.id, "üìÑ–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã:\n\n‚Ä¢ –í –æ–¥–Ω–æ–π –∏–∑ –∫–ª–µ—Ç–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ö–æ–º—è—á–æ–∫\n\
‚Ä¢ –í —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¢–†–ï–•–ó–ê–ß–ù–û–ï –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –°–û–î–ï–†–ñ–ò–¢ —Ü–∏—Ñ—Ä—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ù–û–ú–ï–†–£ –∫–ª–µ—Ç–∫–∏ —Å —Ö–æ–º—è—á–∫–æ–º. –ï—Å–ª–∏ –≤—ã –Ω–µ —É—Å–ø–µ–µ—Ç–µ - –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –µ—â–µ —Ä–∞–∑, –Ω–æ —Ö–æ–º—è—á–æ–∫ —É–∂–µ —É–±–µ–∂–∏—Ç –≤ –¥—Ä—É–≥—É—é –∫–ª–µ—Ç–∫—É\n\
‚Ä¢ –í —Å–ª—É—á–∞–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è (–≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —á–∏—Å–ª–æ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º) —Ö–æ–º—è—á–æ–∫ –±—É–¥–µ—Ç –ø–æ–π–º–∞–Ω\n\
‚Ä¢ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤—ã –Ω–µ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ.")

def rand(): # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Ö–æ–º—è–∫–∞, –Ω–æ–º–µ—Ä–∞ –∫–ª–µ—Ç–æ–∫ 0-8 (+1 –≤ –≤—ã–≤–æ–¥–µ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã)
    global position
    position = random.randint(0, 8)
    
def ChangeHamsterPosition(): # —Å–º–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ —Ö–æ–º—è–∫–∞
    for i in range(len(el)):
        if i == position:
            el[i] = "üêπ"
        else:
            el[i] = "üåø"
                  
def print_map(user_id): # –≤—ã–≤–æ–¥ —Å–µ—Ç–∫–∏ —Å –ø–æ–∑–∏—Ü–∏–µ–π —Ö–æ–º—è–∫–∞. 
    rand()
    ChangeHamsterPosition()
    bot.send_message(user_id, f"‚ùóÔ∏è–•–æ–º—è—á–æ–∫ –≤ {position + 1} –∫–ª–µ—Ç–∫–µ, –õ–û–í–ò –ì–ê–î–ê \n\n{el[0]} {el[1]} {el[2]}\
    \n{el[3]} {el[4]} {el[5]}\
    \n{el[6]} {el[7]} {el[8]}")

def Is_prime(num): #–ø—Ä–æ—Å—Ç–æ—Ç–∞ —á–∏—Å–ª–∞
    if num <= 1:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def –°ontain_number(num): #—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —á–∏—Å–ª–æ–º –Ω—É–∂–Ω–æ–π —Ü–∏—Ñ—Ä—ã
    global position
    num = str(num)
    digit = str(position + 1)
    if (len(num) == 3) and (digit in num) :
        return True
    return False

def is_number(s):#–ø—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —á–∏—Å–ª–æ–≤—ã–º
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# —Ö–µ–Ω–¥–ª–µ—Ä –∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name} üëã!\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:".format(message.from_user))
    bot.send_message(message.chat.id, text="/rules - üìÑ–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n\n/play - üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")

# —Ö–µ–Ω–¥–ª–µ—Ä –∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /play
@bot.message_handler(commands=['play'])
def start(message):
    user_id = message.from_user.id
    print_map(user_id)
    waiting_dict[user_id] = threading.Timer(5, handle_timeout, args=[user_id])
    waiting_dict[user_id].start()

def handle_timeout(user_id):
    if user_id in waiting_dict:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤—ã—à–ª–æ, —Ö–æ–º—è–∫ —É–±–µ–∂–∞–ª‚è∞")
        print_map(user_id)
        waiting_dict[user_id] = threading.Timer(5, handle_timeout, args=[user_id])
        waiting_dict[user_id].start()

# —Ö–µ–Ω–¥–ª–µ—Ä –∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /rules
@bot.message_handler(commands=['rules'])
def rules(message):
    GameRules(message)

@bot.message_handler(func=lambda message: message.from_user.id in waiting_dict)
def process_data(message):
    user_id = message.from_user.id
    data_dict[user_id] = message.text
    if (user_id in waiting_dict) and is_number(data_dict[user_id]) == True:
        if Is_prime(int(data_dict[user_id])) and –°ontain_number(int(data_dict[user_id])):
            waiting_dict[user_id].cancel()
            del waiting_dict[user_id] #—É–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä
            bot.send_message(user_id, "–í—ã –ø–æ–π–º–∞–ª–∏ —Ö–æ–º—è—á–∫–∞ü•≥")
            bot.send_message(user_id, "–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑, –Ω–∞–∂–º–∏ —Å—é–¥–∞üëâüèª /play")
            del data_dict[user_id] #—É–¥–∞–ª—è–µ–º –∑–∞–ø–æ–º–Ω–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        else:
            waiting_dict[user_id].cancel()
            bot.send_message(user_id, "–í—ã –Ω–µ –ø–æ–π–º–∞–ª–∏ —Ö–æ–º—è—á–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑üò≠")
            #del data_dict[user_id] #—É–¥–∞–ª—è–µ–º –∑–∞–ø–æ–º–Ω–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
            print_map(user_id)
            waiting_dict[user_id] = threading.Timer(5, handle_timeout, args=[user_id])
            waiting_dict[user_id].start()
    else:
        bot.send_message(user_id, "–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æüòí\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞ - —É –≤–∞—Å 5 —Å–µ–∫—É–Ω–¥!")
        #del data_dict[user_id] #—É–¥–∞–ª—è–µ–º –∑–∞–ø–æ–º–Ω–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        
# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –æ–ø—Ä–æ—Å –±–æ—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ
bot.polling(none_stop=True, interval=0)